services:
  traefik:
    image: traefik:v2.5
    container_name: "traefik"
    command:
      - -configFile=/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - ./dockers/traefik/traefik.yml:/traefik.yml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.local`)"
      - "traefik.http.routers.api.service=api@internal"
    networks:
      - traefik

  identity:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: "keycloak"
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_DATABASE: ${KC_DB_NAME}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD:  ${KC_DB_PASSWORD}
    volumes:
      - ./dockers/identity/realms:/opt/keycloak/data/import
    command: ["start-dev", "--import-realm"]
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nodejs-msa-traefik"
      - "traefik.http.routers.identity.rule=Host(`identity.local`)"
      - "traefik.http.services.identity.loadbalancer.server.port=8080"
    networks:
      - traefik
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.4.6
    container_name: "kafka"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: ${KAFKA_CLUSTER_ID}
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "echo > /dev/tcp/localhost/9092" ]
      interval: 30s
      timeout: 10s
      retries: 5

  db:
    image: postgres:16
    container_name: "postgres"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./dockers/db/postgres-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgres.rule=Host(`postgres.local`)"
      - "traefik.http.services.postgres.loadbalancer.server.port=5432"
    networks:
      - traefik
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.15.0
    container_name: "elasticsearch"
    environment:
      discovery.type: single-node
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nodejs-msa-traefik"
      - "traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.local`)"
      - "traefik.http.services.elasticsearch.loadbalancer.server.port=9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - traefik
      - backend

  grafana:
    image: grafana/grafana
    container_name: "grafana"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=nodejs-msa-traefik"
      - "traefik.http.routers.grafana.rule=Host(`grafana.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - traefik
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend APP
  # Frontend APP
volumes:
  traefik-certificates:
    name: nodejs-msa-traefik-certificates
  kafka-data:
    name: nodejs-msa-kafka-data
  elasticsearch-data:
    name: nodejs-msa-elasticsearch-data
  grafana-data:
    name: nodejs-msa-grafana-data

networks:
  traefik:
    name: nodejs-msa-traefik
    driver: bridge
  backend:
    name: nodejs-msa-backend
    driver: bridge